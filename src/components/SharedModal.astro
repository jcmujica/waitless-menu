---
import { Image } from "astro:assets";

// Helper function to format price
const formatPrice = (price: number) => {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(price);
};
---

<el-dialog>
  <dialog
    id="shared-modal"
    aria-labelledby="modal-title"
    class="fixed inset-0 size-auto max-h-none max-w-none overflow-y-auto bg-transparent backdrop:bg-transparent"
  >
    <el-dialog-backdrop
      class="fixed inset-0 bg-black/70 transition-opacity data-closed:opacity-0 data-enter:duration-300 data-enter:ease-out data-leave:duration-200 data-leave:ease-in"
    ></el-dialog-backdrop>

    <div
      tabindex="0"
      class="flex min-h-full items-center justify-center p-4 text-center focus:outline-none sm:p-0"
    >
      <el-dialog-panel
        class="relative w-full max-w-md transform overflow-hidden rounded-lg bg-primary-100 text-left shadow-xl transition-all data-closed:translate-y-4 data-closed:opacity-0 data-enter:duration-300 data-enter:ease-out data-leave:duration-200 data-leave:ease-in sm:my-8 data-closed:sm:translate-y-0 data-closed:sm:scale-95"
      >
        {/* Header with close button */}
        <div class="flex items-center justify-between p-4 border-b border-primary-200">
          <h3 id="modal-title" class="text-xl font-bold">
            <!-- Title will be set by JavaScript -->
          </h3>
          <button
            type="button"
            data-command="close"
            data-commandfor="shared-modal"
            class="hover:text-primary-500 focus:outline-none"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {/* Content */}
        <div class="p-6">
          <div class="flex flex-col gap-4">
            <div id="modal-image" class="w-full h-48 rounded-md overflow-hidden hidden">
              <!-- Image will be set by JavaScript -->
            </div>
            
            <div id="modal-description" class="mt-2 hidden">
              <h4 class="text-sm font-medium">Description</h4>
              <p class="text-sm text-muted-foreground">
                <!-- Description will be set by JavaScript -->
              </p>
            </div>
            
            <div id="modal-price" class="mt-2 hidden">
              <h4 class="text-sm font-medium">Price</h4>
              <p class="text-xl font-bold text-primary-500">
                <!-- Price will be set by JavaScript -->
              </p>
            </div>
          </div>
        </div>
        
        {/* Footer */}
        <div class="bg-primary-200 px-4 py-3 flex justify-end gap-2">
          <button
            type="button"
            data-command="close"
            data-commandfor="shared-modal"
            class="inline-flex justify-center rounded-md bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
          >
            Close
          </button>
        </div>
      </el-dialog-panel>
    </div>
  </dialog>
</el-dialog>

<script>
  // This script will be executed client-side
  document.addEventListener('DOMContentLoaded', () => {
    // Find all buttons with data-item attribute
    const buttons = document.querySelectorAll('[data-item]');
    const modal = document.getElementById('shared-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalImage = document.getElementById('modal-image');
    const modalDescription = document.getElementById('modal-description');
    const modalPrice = document.getElementById('modal-price');
    
    if (!modal || !modalTitle || !modalImage || !modalDescription || !modalPrice) {
      console.error('Modal elements not found');
      return;
    }
    
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const itemData = JSON.parse(button.getAttribute('data-item') || '{}');
        
        // Set modal title
        modalTitle.textContent = itemData.name || '';
        
        // Handle image
        if (itemData.image_url && itemData.showImages) {
          modalImage.innerHTML = `
            <img 
              class="w-full h-full object-cover object-center" 
              src="${itemData.image_url}" 
              alt="${itemData.name || ''}" 
              width="400" 
              height="300"
            />
          `;
          modalImage.classList.remove('hidden');
        } else {
          modalImage.classList.add('hidden');
        }
        
        // Handle description
        if (itemData.description && itemData.showDescriptions) {
          const descriptionText = modalDescription.querySelector('p');
          if (descriptionText) {
            descriptionText.textContent = itemData.description;
          }
          modalDescription.classList.remove('hidden');
        } else {
          modalDescription.classList.add('hidden');
        }
        
        // Handle price
        if (itemData.price !== null && itemData.price !== undefined && itemData.showPrices) {
          const priceText = modalPrice.querySelector('p');
          if (priceText) {
            // Format price
            const formattedPrice = new Intl.NumberFormat("en-US", {
              style: "currency",
              currency: "USD",
            }).format(itemData.price);
            
            priceText.textContent = formattedPrice;
          }
          modalPrice.classList.remove('hidden');
        } else {
          modalPrice.classList.add('hidden');
        }
        
        // Show modal
        if (modal instanceof HTMLDialogElement) {
          modal.showModal();
        }
      });
    });
    
    // Close modal when clicking close buttons
    const closeButtons = document.querySelectorAll('[data-command="close"][data-commandfor="shared-modal"]');
    closeButtons.forEach(button => {
      button.addEventListener('click', () => {
        if (modal instanceof HTMLDialogElement) {
          modal.close();
        }
      });
    });
  });
</script>
