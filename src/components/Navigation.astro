---
interface SectionItem {
  id: string;
  name: string;
  pageId: string;
}

interface Props {
  sections: SectionItem[];
}

const { sections = [] } = Astro.props;
---

{
  sections.length > 0 && (
    <div class="glassmorphism border-b border-[var(--glass-border)] tint sticky top-0 z-10 w-full">
      <nav class="">
        <div class="overflow-x-auto scrollbar-hide" id="nav-container">
          <ul class="flex whitespace-nowrap py-3 px-3 gap-3 items-center">
            {sections.map((section, index) => (
              <li class="flex-shrink-0">
                <button
                  class="section-nav-item text-sm font-medium px-4 py-2 rounded-full transition-all duration-300 flex items-center gap-2"
                  data-section-target={`section-${section.id.replace("section-", "")}`}
                  data-page-id={section.pageId}
                >
                  <span>{section.name}</span>
                </button>
              </li>
            ))}
          </ul>
        </div>
      </nav>
    </div>
  )
}

<style>
  :global(.light-mode) {
    .active {
      border: 2px solid var(--primary-500);
      color: var(--primary-900);
    }
  }

  :global(.dark-mode) {
    .active {
      border: 2px solid var(--primary-500);
      color: var(--primary-100);
    }
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const navContainer = document.getElementById("nav-container");
    const navButtons = Array.from(
      document.querySelectorAll(".section-nav-item"),
    );
    const sections = Array.from(document.querySelectorAll('[id^="section-"]'));

    if (!sections.length || !navButtons.length || !navContainer) return;

    const navByTarget = new Map();
    let userClicking = false;

    navButtons.forEach((btn, i) => {
      const target = btn.dataset.sectionTarget;
      if (target) navByTarget.set(target, btn);
      if (!btn.id) btn.id = `section-nav-item-${i}`;

      btn.addEventListener("click", () => {
        const section = document.getElementById(target);
        if (!section) return;
        userClicking = true;
        section.scrollIntoView({ behavior: "smooth", inline: "start" });

        // Reset the flag after the smooth scroll is likely finished
        setTimeout(() => (userClicking = false), 800);
      });
    });

    function clearActive() {
      navButtons.forEach((b) => b.classList.remove("active"));
    }

    function setActive(sectionId, fromScroll = false) {
      const btn = navByTarget.get(sectionId);
      if (!btn) return;
      clearActive();
      btn.classList.add("active");

      if (fromScroll && !userClicking) {
        const containerRect = navContainer.getBoundingClientRect();
        const btnRect = btn.getBoundingClientRect();

        const fullyVisible =
          btnRect.left >= containerRect.left &&
          btnRect.right <= containerRect.right;

        if (!fullyVisible) {
          // Instant scroll when triggered by normal scrolling
          btn.scrollIntoView({ behavior: "auto", inline: "center" });
        }
      }
    }

    const observer = new IntersectionObserver(
      (entries) => {
        const visible = entries.filter((e) => e.isIntersecting);
        if (!visible.length) return;

        // Pick the section closest to the top (lowest boundingClientRect.top)
        const topMost = visible.reduce((prev, curr) => {
          return prev.boundingClientRect.top < curr.boundingClientRect.top
            ? prev
            : curr;
        });

        setActive(topMost.target.id, true);
      },
      {
        rootMargin: "0px 0px -80% 0px",
        threshold: 0,
      },
    );

    sections.forEach((s) => observer.observe(s));
  });
</script>