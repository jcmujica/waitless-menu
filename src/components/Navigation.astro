---
interface SectionItem {
  id: string;
  name: string;
  pageId: string;
}

interface Props {
  sections: SectionItem[];
}

const { sections = [] } = Astro.props;
---

{
  sections.length > 0 && (
    <div class="sticky top-0 z-10 w-full">
      <nav class="glassmorphism">
        <div class="overflow-x-auto scrollbar-hide" id="nav-container">
          <ul class="flex whitespace-nowrap py-3 px-3 gap-3 items-center">
            {sections.map((section, index) => (
              <li class="flex-shrink-0">
                <button
                  class="section-nav-item text-sm font-medium px-4 py-2 rounded-full transition-all duration-300 flex items-center gap-2"
                  data-section-target={`section-${section.id.replace("section-", "")}`}
                  data-page-id={section.pageId}
                >
                  <span>{section.name}</span>
                </button>
              </li>
            ))}
          </ul>
        </div>
      </nav>
    </div>
  )
}

<style>
  /* Hide scrollbar for navigation */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none; /* Chrome, Safari and Opera */
  }

  /* Dark mode navigation item */
  .dark .section-nav-item {
    background-color: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.8);
    position: relative;
    overflow: hidden;
  }
  
  /* Light mode navigation item */
  :root:not(.dark) .section-nav-item {
    background-color: rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.1);
    color: rgba(0, 0, 0, 0.8);
    position: relative;
    overflow: hidden;
  }

  /* Dark mode glassmorphism effect */
  .dark .section-nav-glassmorphism::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    opacity: 0.5;
  }
  
  /* Light mode glassmorphism effect */
  :root:not(.dark) .section-nav-glassmorphism::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0.05),
      transparent
    );
    opacity: 0.5;
  }

  /* Dark mode nav index */
  .dark .nav-index {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    font-size: 0.7rem;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
  }
  
  /* Light mode nav index */
  :root:not(.dark) .nav-index {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    font-size: 0.7rem;
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 50%;
  }

  /* Dark mode active state */
  .dark .section-nav-item.active {
    color: var(--primary-300);
    background-color: rgba(255, 255, 255, 0.1);
    border-color: var(--primary-500);
    transform: translateY(-2px);
    box-shadow:
      0 4px 12px rgba(0, 0, 0, 0.2),
      0 0 0 1px var(--primary-700);
  }

  .dark .section-nav-item.active .nav-index {
    background-color: var(--primary-700);
    color: var(--primary-300);
  }
  
  /* Light mode active state */
  :root:not(.dark) .section-nav-item.active {
    color: var(--primary-700);
    background-color: rgba(0, 0, 0, 0.05);
    border-color: var(--primary-500);
    transform: translateY(-2px);
    box-shadow:
      0 4px 12px rgba(0, 0, 0, 0.1),
      0 0 0 1px var(--primary-400);
  }

  :root:not(.dark) .section-nav-item.active .nav-index {
    background-color: var(--primary-200);
    color: var(--primary-700);
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const navContainer = document.getElementById("nav-container");
    const navButtons = Array.from(
      document.querySelectorAll(".section-nav-item"),
    );
    const sections = Array.from(document.querySelectorAll('[id^="section-"]'));

    if (!sections.length || !navButtons.length || !navContainer) return;

    const navByTarget = new Map();
    let userClicking = false;

    navButtons.forEach((btn, i) => {
      const target = btn.dataset.sectionTarget;
      if (target) navByTarget.set(target, btn);
      if (!btn.id) btn.id = `section-nav-item-${i}`;

      btn.addEventListener("click", () => {
        const section = document.getElementById(target);
        if (!section) return;
        userClicking = true;
        section.scrollIntoView({ behavior: "smooth", inline: "start" });

        // Reset the flag after the smooth scroll is likely finished
        setTimeout(() => (userClicking = false), 800);
      });
    });

    function clearActive() {
      navButtons.forEach((b) => b.classList.remove("active"));
    }

    function setActive(sectionId, fromScroll = false) {
  const btn = navByTarget.get(sectionId);
  if (!btn) return;
  clearActive();
  btn.classList.add("active");

  if (fromScroll && !userClicking) {
    const containerRect = navContainer.getBoundingClientRect();
    const btnRect = btn.getBoundingClientRect();

    const fullyVisible =
      btnRect.left >= containerRect.left &&
      btnRect.right <= containerRect.right;

    if (!fullyVisible) {
      // Instant scroll when triggered by normal scrolling
      btn.scrollIntoView({ behavior: "auto", inline: "center" });
    }
  }
}


    const observer = new IntersectionObserver(
      (entries) => {
        const visible = entries.filter((e) => e.isIntersecting);
        if (!visible.length) return;

        // Pick the section closest to the top (lowest boundingClientRect.top)
        const topMost = visible.reduce((prev, curr) => {
          return prev.boundingClientRect.top < curr.boundingClientRect.top
            ? prev
            : curr;
        });

        setActive(topMost.target.id, true);
      },
      {
        rootMargin: "0px 0px -80% 0px",
        threshold: 0,
      },
    );

    sections.forEach((s) => observer.observe(s));
  });
</script>
