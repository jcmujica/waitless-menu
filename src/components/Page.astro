---
import Item from "./Item.astro";
import type { MenuItem } from "@/types/menu";
import FloatingButton from "./Buttons/FloatingButton.astro";
import Navigation from "./Navigation.astro";
interface Props {
  id: string;
  name: string;
  items: MenuItem[];
  settings: {
    showPrices: boolean;
    showImages: boolean;
    showDescriptions: boolean;
  };
  isVisible?: boolean;
  baseUrl: string;
  menuType?: string;
  allSections?: Array<{
    id: string;
    name: string;
    pageId: string;
  }>;
  showNavigation?: boolean;
}

const {
  id,
  name,
  items = [],
  settings,
  isVisible = true,
  baseUrl,
  menuType = "multi-page",
  allSections = [],
  showNavigation = true,
} = Astro.props;

// Extract sections for the navigation bar from current page items
const pageSections = items.filter((item) => item.type === "section");

// Generate unique IDs for sections based on their names
const pageSectionIds = pageSections.map((section) => ({
  id: `section-${section.id}`,
  name: section.name,
  pageId: id,
}));

// Determine which sections to display in the navigation
// For single-page menu, use allSections (passed from Menu component)
// For multi-page menu, use only the sections from the current page
const navigationSections =
  menuType === "single-page" ? allSections : pageSectionIds;
---
<main
  id={`page-${id}`}
  class="min-h-screen flex flex-col gap-4"
  style={`display: ${isVisible ? "block" : "none"};`}
>
  {
    /* Horizontal navigation bar for sections - only shown if showNavigation is true */
  }
  {
    showNavigation && navigationSections.length > 0 && (
      <Navigation sections={navigationSections} />
    )
  }

  <ul class="flex flex-col gap-3 p-3">
    {
      items.map((item, index) => {
        // For section items, add an ID to use as scroll target
        const sectionId = item.type === "section" ? `section-${item.id}` : "";
        return (
          <div
            id={sectionId}
            class={item.type === "section" ? "scroll-mt-16 not-first:mt-4" : ""}
          >
            <Item client:load item={item} settings={settings} />
          </div>
        );
      })
    }
  </ul>
  {menuType === "multi-page" && <FloatingButton href={baseUrl} />}
</main>
