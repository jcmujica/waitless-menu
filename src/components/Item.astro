---
import { Image } from "astro:assets";
import type { MenuItem } from "@/types/menu";
import ItemModal from './ItemModal.astro'
import { formatPrice } from "@/utils/formatPrice";

// Define the props for the Item component
interface Props {
  item?: MenuItem;
  settings: {
    showPrices: boolean;
    showImages: boolean;
    showDescriptions: boolean;
  };
}

// Destructure the props
const { item, settings } = Astro.props;

const { name, price, image_url, description, is_available } = item || {};
const { showPrices, showImages, showDescriptions } = settings;

// Create a JSON string with the item data for the modal
const itemData = item
  ? JSON.stringify({
      name,
      price,
      image_url,
      description,
      showPrices,
      showImages,
      showDescriptions,
    })
  : null;
---

<script define:vars={{ itemId: item?.id }}>
  // Only add event listener if this is an actual item
  if (itemId) {
    document.addEventListener('DOMContentLoaded', () => {
      // Get references to this specific item and its modal
      const menuItem = document.getElementById(`item-${itemId}`);
      const modal = document.getElementById(`item-modal-${itemId}`);
      
      if (menuItem && modal && modal instanceof HTMLDialogElement) {
        menuItem.addEventListener('click', () => {
          // First set initial state (if not already set by CSS)
          modal.style.opacity = '0';
          modal.style.transform = 'scale(0.95) translateY(10px)';
          
          // Show the modal
          modal.showModal();
          
          // Force a reflow to ensure the initial state is applied
          void modal.offsetWidth;
          
          // Then remove the inline styles to let CSS transitions take over
          setTimeout(() => {
            modal.style.opacity = '';
            modal.style.transform = '';
          }, 10);
        });
      }
    });
  }
</script>

{
  item?.type === "item" && (
    <>
      <li
        id={`item-${item.id}`}
        class="menu-item relative flex w-full justify-between items-center gap-4 rounded-lg backdrop-blur-sm item-gradient border-gray-200/20 border shadow-sm overflow-hidden cursor-pointer hover:shadow-md transition-all duration-200 hover:-translate-y-0.5"
        data-item-id={item.id}
        data-item-data={itemData}
      >
        {showImages && image_url && (
          <div class="h-full rounded-l-lg overflow-hidden shrink-0">
            <Image
              class="object-cover object-center h-[80px] w-[80px]"
              src={image_url}
              alt={name || ""}
              width={80}
              height={80}
              inferSize
            />
          </div>
        )}
        <div class="flex flex-col gap-1 grow py-3">
          <h3 class="font-bold text-sm">{name}</h3>
          {showDescriptions && description && (
            <p class="text-xs line-clamp-2 opacity-80">{description}</p>
          )}
        </div>
        {showPrices && price !== null && price !== undefined && (
          <div class="flex flex-col gap-2 items-center shrink-0 px-4">
            <p class="text-sm font-bold text-primary-300">
              {formatPrice(price)}
            </p>
          </div>
        )}
      </li>
      <ItemModal item={item} />
    </>
  )
}

{
  item?.type === "section" && (
    <li class="relative w-full overflow-hidden">
      <div class="flex w-full rounded-lg backdrop-blur-sm px-2 shadow-lg">
        <div class="flex flex-col gap-2 grow relative z-10">
          <div class="flex items-center gap-2">
            <h3 class="font-bold text-lg tracking-wide">{name}</h3>
          </div>
        </div>
      </div>
    </li>
  )
}

<style>
  /* Custom gradients for items using CSS variables */
  .item-gradient {
    background: linear-gradient(
      to right,
      rgba(0, 0, 0, 0.3),
      rgba(0, 0, 0, 0.2)
    );
    position: relative;
  }

  .item-gradient::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to right,
      color-mix(in srgb, var(--primary-950) 30%, transparent),
      color-mix(in srgb, var(--primary-900) 20%, transparent)
    );
    z-index: -1;
  }

  /* Subtle decorative gradient for items */
  .menu-item::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    height: 50%;
    width: 100%;
    background: linear-gradient(
      to top,
      color-mix(in srgb, var(--primary-900) 20%, transparent),
      transparent
    );
    pointer-events: none;
  }
</style>
