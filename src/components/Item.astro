---
import { Image } from "astro:assets";
import type { MenuItem } from "@/types/menu";
import ItemModal from "./ItemModal.astro";
import { formatPrice } from "@/utils/formatPrice";
import Section from "./Section.astro";

// Define the props for the Item component
interface Props {
  item?: MenuItem;
  settings: {
    showPrices: boolean;
    showImages: boolean;
    showDescriptions: boolean;
  };
}

// Destructure the props
const { item, settings } = Astro.props;

const { name, price, image_url, description, is_available } = item || {};
const { showPrices, showImages, showDescriptions } = settings;

// Create a JSON string with the item data for the modal
const itemData = item
  ? JSON.stringify({
      name,
      price,
      image_url,
      description,
      showPrices,
      showImages,
      showDescriptions,
    })
  : null;
---

<script>
  // Add click event listeners to all menu items
  document.addEventListener("DOMContentLoaded", () => {
    const menuItems = document.querySelectorAll(".menu-item");

    menuItems.forEach((item) => {
      item.addEventListener("click", () => {
        const itemId = item.getAttribute("data-item-id");
        const modal = document.getElementById(`item-modal-${itemId}`);

        if (modal && modal instanceof HTMLDialogElement) {
          // First set initial state (if not already set by CSS)
          modal.style.opacity = "0";
          modal.style.transform = "scale(0.95) translateY(10px)";

          // Show the modal
          modal.showModal();

          // Force a reflow to ensure the initial state is applied
          void modal.offsetWidth;

          // Then remove the inline styles to let CSS transitions take over
          setTimeout(() => {
            modal.style.opacity = "";
            modal.style.transform = "";
          }, 10);
        }
      });
    });
  });
</script>

{
  item?.type === "item" && (
    <>
      <li
        id={`item-${item.id}`}
        class="glassmorphism tint menu-item relative flex w-full justify-between items-center gap-4 rounded-lg border shadow-xs overflow-hidden cursor-pointer"
        data-item-id={item.id}
        data-item-data={itemData}
      >
        {showImages && image_url && (
          <div class="h-full rounded-l-lg overflow-hidden shrink-0">
            <Image
              class="object-cover object-center h-[80px] w-[80px]"
              src={image_url}
              alt={name || ""}
              width={80}
              height={80}
              inferSize
            />
          </div>
        )}
        <div class="flex flex-col gap-1 grow py-3">
          <h3 class="font-bold text-md">{name}</h3>
          {showDescriptions && description && (
            <p class="text-xs line-clamp-1 opacity-70">{description}</p>
          )}
        </div>
        {showPrices && price !== null && price !== undefined && (
          <div class="flex flex-col gap-2 items-center shrink-0 pr-4">
            <p class="price text-sm font-bold">{formatPrice(price)}</p>
          </div>
        )}
      </li>
      <ItemModal item={item} />
    </>
  )
}

{item?.type === "section" && <Section name={item.name} />}

<style>
  :global(.light-mode) {
    .menu-item {
      background-color: var(--primary-50);
      border: 1px solid var(--glass-border);
    }

    .price {
      color: var(--primary-800);
    }
  }

  :global(.dark-mode) {
    .menu-item {
      background-color: var(--neutral-900);
      border: 1px solid var(--glass-border);
    }

    .price {
      color: var(--primary-200);
    }
  }
</style>
