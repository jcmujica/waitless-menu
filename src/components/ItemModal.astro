---
import { Image } from "astro:assets";
import type { MenuItem } from "@/types/menu";
import { formatPrice } from "@/utils/formatPrice";

interface Props {
  item: MenuItem;
}

const { item } = Astro.props;
const { name, price, image_url, description } = item || {};
---

<dialog
  id={`item-modal-${item.id}`}
  class="modal tint-soft rounded-lg overflow-hidden shadow-xl"
>
  <div
    class="w-full max-w-md text-white p-0 rounded-lg overflow-hidden relative"
  >
    <button
      type="button"
      class="close-modal absolute top-3 right-3 w-9 h-9 flex items-center justify-center rounded-full bg-black/80 text-white shadow-lg border border-black/10 transition-all duration-200 z-10"
      aria-label="Close modal"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    {
      image_url && (
        <div class="w-full h-48 overflow-hidden relative">
          <Image
            src={image_url}
            alt={name || ""}
            width={400}
            height={300}
            class="w-full h-full object-cover"
          />
        </div>
      )
    }

    <div class="description p-4">
      <div class="flex justify-between items-start mb-4">
        <h2 class="text-xl font-bold">{name}</h2>
        {
          price !== null && price !== undefined && (
            <p class="text-lg font-bold">{formatPrice(price)}</p>
          )
        }
      </div>

      {description && <p class="text-sm opacity-80">{description}</p>}
    </div>
  </div>
</dialog>

<script define:vars={{ itemId: item.id }} is:inline>
  // Get references to the modal and related elements
  const modal = document.getElementById(`item-modal-${itemId}`);
  const closeButton = modal?.querySelector(".close-modal");

  // Function to handle smooth closing of the modal
  const closeModalWithAnimation = () => {
    if (modal?.open) {
      // Add a class to trigger the closing animation
      modal.classList.add("closing");

      // Wait for animation to complete before actually closing
      setTimeout(() => {
        modal.close();
        modal.classList.remove("closing");
      }, 280); // Slightly less than the transition duration
    }
  };

  // Close modal when clicking the close button
  closeButton?.addEventListener("click", (e) => {
    e.preventDefault();
    closeModalWithAnimation();
  });

  // Close modal when clicking outside the modal content
  modal?.addEventListener("click", (event) => {
    if (event.target === modal) {
      closeModalWithAnimation();
    }
  });
</script>

<style>
  .modal::backdrop {
    backdrop-filter: blur(12px);
    opacity: 0;
    transition: opacity 0.3s ease-out;
  }

  .modal[open]::backdrop {
    opacity: 1;
  }

  .modal {
    border: none;
    padding: 0;
    max-width: 90vw;
    max-height: 90vh;
    margin: auto;
    opacity: 0;
    transform: scale(0.95) translateY(10px);
    box-shadow: 0 8px 32px rgba(24, 13, 13, 0.2);
    transition:
      opacity 0.3s ease-out,
      transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .modal[open] {
    opacity: 1;
    transform: scale(1) translateY(0);
  }

  .modal.closing {
    opacity: 0;
    transform: scale(0.95) translateY(10px);
  }

  .modal.closing::backdrop {
    opacity: 0;
  }

  :global(.light-mode) {
    .modal {
      border: 1px solid var(--glass-border);
    }
    .modal::backdrop {
      background-color: rgba(0, 0, 0, 0.2);
    }

    .description {
      background-color: rgba(var(--primary-50-rgb), 0.1);
      color: var(--black);

      p {
        color: var(--black);
      }
    }
  }

  :global(.dark-mode) {
    .modal {
      border: 1px solid var(--glass-border);
    }
    .modal::backdrop {
      background-color: rgba(0, 0, 0, 0.2);
    }

    .description {
      background-color: rgba(var(--primary-900-rgb), 0.1);
      color: var(--white);

      p {
        color: var(--white);
      }
    }
  }
</style>
