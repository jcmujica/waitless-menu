---
import { Image } from "astro:assets";

// Helper function to format price
const formatPrice = (price: number) => {
  return new Intl.NumberFormat("es-CL", {
    style: "currency",
    currency: "CLP",
    maximumFractionDigits: 0,
  }).format(price);
};
---

<!-- Simple Modal Implementation -->
<div id="item-modal-container" class="fixed inset-0 z-50 hidden items-center justify-center">
  <!-- Backdrop -->
  <div id="item-modal-backdrop" class="absolute inset-0 bg-black/70"></div>
  
  <!-- Modal Content -->
  <div id="item-modal-content" class="relative w-full max-w-md glassmorphism rounded-xl shadow-xl transform transition-all duration-300 scale-95 opacity-0" id="modal-animation">
    <!-- Header with glow effect -->
    <div class="flex items-center justify-between p-4 border-b border-primary-200/20">
      <h3 id="item-modal-title" class="text-xl font-bold text-white glow-text">Item Title</h3>
      <button id="item-modal-close" class="hover:text-primary-400 focus:outline-none transition-colors duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Body with glass effect -->
    <div class="p-6 relative overflow-hidden">
      <!-- Decorative elements for glassmorphism effect -->
      <div class="absolute -bottom-10 -right-10 w-32 h-32 rounded-full bg-primary-500/10 blur-xl"></div>
      <div class="absolute -top-10 -left-10 w-24 h-24 rounded-full bg-primary-400/10 blur-xl"></div>
      
      <div class="flex flex-col gap-5 relative z-10">
        <div id="item-modal-image" class="w-full h-48 rounded-lg overflow-hidden hidden shadow-lg">
          <!-- Image placeholder -->
        </div>
        
        <div id="item-modal-description" class="mt-2 hidden bg-white/5 p-3 rounded-lg">
          <h4 class="text-sm font-medium text-primary-300 mb-1">Description</h4>
          <p class="text-sm text-white/80"></p>
        </div>
        
        <div id="item-modal-price" class="mt-2 hidden bg-white/5 p-3 rounded-lg">
          <h4 class="text-sm font-medium text-primary-300 mb-1">Price</h4>
          <p class="text-xl font-bold text-primary-300 glow-text"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Define the item data interface
  interface ItemData {
    name?: string;
    price?: number;
    image_url?: string;
    description?: string;
    showPrices?: boolean;
    showImages?: boolean;
    showDescriptions?: boolean;
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const modalContainer = document.getElementById('item-modal-container');
    const modalBackdrop = document.getElementById('item-modal-backdrop');
    const modalContent = document.getElementById('item-modal-content');
    const modalTitle = document.getElementById('item-modal-title');
    const modalImage = document.getElementById('item-modal-image');
    const modalDescription = document.getElementById('item-modal-description');
    const modalPrice = document.getElementById('item-modal-price');
    const closeButtons = document.querySelectorAll('#item-modal-close, #item-modal-close-btn');
    
    // Find all menu items with data-item-modal attribute
    const menuItems = document.querySelectorAll('.menu-item[data-item-modal]');
    
    // Function to open modal with animation
    function openModal(data: ItemData) {
      if (!modalContainer || !modalTitle || !modalImage || !modalDescription || !modalPrice || !modalContent) {
        console.error('Modal elements not found');
        return;
      }
      
      // Set modal title
      modalTitle.textContent = data.name || '';
      
      // Handle image
      if (data.image_url && data.showImages) {
        modalImage.innerHTML = `
          <img 
            class="w-full h-full object-cover object-center" 
            src="${data.image_url}" 
            alt="${data.name || ''}" 
            width="400" 
            height="300"
          />
        `;
        modalImage.classList.remove('hidden');
      } else {
        modalImage.classList.add('hidden');
      }
      
      // Handle description
      if (data.description && data.showDescriptions) {
        const descriptionText = modalDescription.querySelector('p');
        if (descriptionText) {
          descriptionText.textContent = data.description;
        }
        modalDescription.classList.remove('hidden');
      } else {
        modalDescription.classList.add('hidden');
      }
      
      // Handle price
      if (data.price !== null && data.price !== undefined && data.showPrices) {
        const priceText = modalPrice.querySelector('p');
        if (priceText) {
          // Format price
          const formattedPrice = new Intl.NumberFormat("es-CL", {
            style: "currency",
            currency: "CLP",
            maximumFractionDigits: 0,
          }).format(data.price);
          
          priceText.textContent = formattedPrice;
        }
        modalPrice.classList.remove('hidden');
      } else {
        modalPrice.classList.add('hidden');
      }
      
      // Show modal with animation
      modalContainer.classList.remove('hidden');
      modalContainer.classList.add('flex');
      
      // Trigger animation after a small delay to ensure display:flex is applied
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
      
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    }
    
    // Function to close modal with animation
    function closeModal() {
      if (!modalContainer || !modalContent) return;
      
      // Start closing animation
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      
      // Hide modal after animation completes
      setTimeout(() => {
        modalContainer.classList.add('hidden');
        modalContainer.classList.remove('flex');
        document.body.style.overflow = ''; // Restore scrolling
      }, 200);
    }
    
    // Add click event listeners to menu items
    menuItems.forEach(item => {
      item.addEventListener('click', () => {
        try {
          const itemDataStr = item.getAttribute('data-item-modal') || '{}';
          const itemData: ItemData = JSON.parse(itemDataStr);
          openModal(itemData);
        } catch (error) {
          console.error('Error parsing item data:', error);
        }
      });
    });
    
    // Add click event listeners to close buttons
    closeButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent event from bubbling up
        closeModal();
      });
    });
    
    // Close modal when clicking outside
    modalBackdrop?.addEventListener('click', (e) => {
      e.stopPropagation(); // Prevent event from bubbling up
      closeModal();
    });
    
    // Close modal on Escape key press
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        closeModal();
      }
    });
    
    // Prevent clicks inside modal content from closing the modal
    modalContent?.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  });
</script>

<style>
  /* Modal-specific styling */
  .glassmorphism .flex.items-center {
    border-bottom-color: rgba(255, 255, 255, 0.1) !important;
  }
  
  /* Image hover effect */
  #item-modal-image img {
    transition: transform 0.5s ease;
  }
  
  #item-modal-image:hover img {
    transform: scale(1.05);
  }
</style>
