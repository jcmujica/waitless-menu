---
import { getColorShades } from "@/utils/getColorshades";
import type { IMenu, MenuPage, ParsedMenuAppearanceStyle } from "@/types/menu";
import Page from "./Page.astro";
import Footer from "./Footer.astro";
import Home from "./Home.astro";

interface Props {
  menu: IMenu;
  currentPage?: MenuPage;
  account?: string;
  accountPath?: string;
  pageId?: string;
  error?: Error | unknown;
}

const { menu, currentPage, account, accountPath, pageId, error } = Astro.props;

// Determine the route type based on available params
const isQrRoute = !!account;
const isPageView = !!pageId || !!currentPage;
const isMultiPage = menu?.type === "multi-page";
const isSinglePage = menu?.type === "single-page";

// Determine the route type for the dynamic routing
const routeType = isQrRoute ? 'qr' : 'v';
const identifier = isQrRoute ? (account as string) : (accountPath as string);

// Generate the base URL for navigation
const baseUrl = (identifier && routeType) ? `/${routeType}/${identifier}` : '';

// Parse appearance styles
const styles = JSON.parse(
  menu?.appearance?.style || "{}",
) as ParsedMenuAppearanceStyle;
const backgroundStyle = styles?.background?.style || {};

// Extract primary color from styles
const primaryColor = styles?.colors?.primary?.id?.split("-")[0] || "slate";

// Get the theme mode (light or dark) - this is forced by the restaurant
const theme = menu?.appearance?.theme || "light";

// Get color shades for legacy CSS variables
const primaryColorShades = getColorShades(primaryColor, "primary");

const settings = {
  showPrices: menu?.settings?.showPrices ?? true,
  showImages: menu?.settings?.showImages ?? true,
  showDescriptions: menu?.settings?.showDescriptions ?? true,
};

const isPageNotFound = isPageView && !currentPage && menu;
const shouldRedirect = isPageNotFound || error;
const shouldShowHome = isMultiPage && !isPageView;
const shouldShowPage = isPageView && currentPage;
const shouldShowSinglePage = isSinglePage && !isPageView;
---

<Fragment>
  <title slot="head">{menu?.name || "Menu"}</title>
  <script slot="head" define:vars={{ baseUrl, shouldRedirect }} is:inline>
    if (shouldRedirect) {
      window.location.href = baseUrl;
    }
  </script>
  <script
    slot="head"
    is:inline
    src="https://cdn.jsdelivr.net/npm/@tailwindplus/elements@1"
    type="module"></script>
  <script slot="head" src="/src/scripts/dialog.js"></script>
  <div style={{ ...backgroundStyle }}>
    <div class="max-w-2xl mx-auto">
      {
        menu && (
          <>
            {/* Navigation for multi-page menus when not in page view */}
            {shouldShowHome && <Home menu={menu} baseUrl={baseUrl} />}

            {/* Main content area */}
            {/* Specific page view */}
            {shouldShowPage && (
              <Page
                id={currentPage.id}
                name={currentPage.name}
                items={currentPage.items}
                baseUrl={baseUrl}
                settings={settings}
                isVisible={true}
              />
            )}

            {/* Single-page layout */}
            {shouldShowSinglePage && (
              <>
                {menu.pages.map((page: MenuPage) => (
                  <Page
                    id={page.id}
                    name={page.name}
                    items={page.items}
                    baseUrl={baseUrl}
                    settings={settings}
                    isVisible={true}
                  />
                ))}
              </>
            )}
            <Footer />
          </>
        )
      }
    </div>
  </div>
</Fragment>

<style is:global define:vars={{ ...primaryColorShades }}></style>
