---
import { getColorShades } from "@/utils/getColorshades";
import type { IMenu, MenuPage } from "@/types/menu";
import Page from "./Page.astro";

interface Props {
  menu: IMenu;
  currentPage?: MenuPage;
  account?: string;
  accountPath?: string;
  pageId?: string;
  error?: Error | unknown;
}

const { 
  menu, 
  currentPage,
  account,
  accountPath,
  pageId,
  error
} = Astro.props;

// Determine the route type based on available params
const isQrRoute = !!account;
const isVanityRoute = !!accountPath;
const isPageView = !!pageId || !!currentPage;
const isMultiPage = menu?.type === "multi-page";
const isSinglePage = menu?.type === "single-page";

// Generate the base URL for navigation
const baseUrl = isQrRoute ? `/qr/${account}` : `/v/${accountPath}`;

// Parse appearance styles
const styles = JSON.parse(menu?.appearance?.style || "{}");
const baseColor = styles?.colors?.primary?.id?.split("-")[0] || "slate";
const colorShades = getColorShades(baseColor);
const theme = menu?.appearance?.theme || "light";

// Find the page to display in single-page view
const displayPage = currentPage || (isPageView ? undefined : null);

// Get settings for displaying items
const showPrices = menu?.settings?.showPrices ?? true;
const showImages = menu?.settings?.showImages ?? true;
const showDescriptions = menu?.settings?.showDescriptions ?? true;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content={theme} />
    <title>{menu?.name || "Menu"}</title>
  </head>

  <body class={theme}>
    <div class="menu-container">
      {/* Error message */}
      {error && (
        <div class="error-container">
          <h1>Error loading menu</h1>
          <p>{error instanceof Error ? error.message : "Unknown error"}</p>
        </div>
      )}

      {/* Menu content when available */}
      {menu && (
        <>
          {/* Header with menu name */}
          <header>
            <h1>{menu?.name || "Menu"}</h1>
            
            {/* Back button when viewing a specific page */}
            {isPageView && (
              <a href={baseUrl} class="back-link">Back to Menu</a>
            )}
          </header>

          {/* Navigation for multi-page menus when not in page view */}
          {isMultiPage && !isPageView && menu?.pages && menu.pages.length > 0 && (
            <nav class="page-navigation">
              {menu.pages.map((page) => (
                <a href={`${baseUrl}/${page.id}`} class="page-link">{page.name}</a>
              ))}
            </nav>
          )}

          {/* Main content area */}
          <main>
            {/* Specific page view */}
            {isPageView && currentPage && (
              <Page
                id={currentPage.id}
                name={currentPage.name}
                items={currentPage.items}
                showPrices={showPrices}
                showImages={showImages}
                isVisible={true}
              />
            )}

            {/* Page not found */}
            {isPageView && !currentPage && menu && (
              <div class="not-found">
                <h2>Page not found</h2>
                <p>The requested page could not be found.</p>
              </div>
            )}

            {/* Single-page layout */}
            {isSinglePage && !isPageView && menu.pages && menu.pages.length > 0 && (
              <div class="single-page-layout">
                {menu.pages.map((page) => (
                  <Page
                    id={page.id}
                    name={page.name}
                    items={page.items}
                    showPrices={showPrices}
                    showImages={showImages}
                    isVisible={true}
                  />
                ))}
              </div>
            )}

            {/* Custom slot content */}
            <slot />
          </main>

          {/* Footer */}
          <footer>
            <p>Powered by Waitless</p>
          </footer>
        </>
      )}
    </div>
  </body>
</html>

<style is:global define:vars={{ ...colorShades, theme }}>
  :root {
    color-scheme: var(--theme);
    --bg-color: var(--50);
    --text-color: var(--900);
    --primary-color: var(--500);
    --primary-hover: var(--600);
    --border-color: var(--200);
    --error-color: #ef4444;
    --warning-bg: #fef2f2;
    --warning-text: #b91c1c;
  }

  .dark {
    --bg-color: var(--900);
    --text-color: var(--100);
    --border-color: var(--800);
    --warning-bg: #7f1d1d;
    --warning-text: #fecaca;
  }

  body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    margin: 0;
    padding: 0;
  }

  .menu-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }

  header {
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  header h1 {
    margin-top: 0;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 1rem;
    color: var(--primary-color);
    text-decoration: none;
  }

  .back-link:hover {
    color: var(--primary-hover);
    text-decoration: underline;
  }

  .page-navigation {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .page-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: var(--primary-color);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .page-link:hover {
    background-color: var(--primary-hover);
  }

  .error-container {
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    background-color: var(--warning-bg);
    color: var(--warning-text);
    border-radius: 4px;
    border-left: 4px solid var(--error-color);
  }

  .error-container h1 {
    margin-top: 0;
    font-size: 1.5rem;
  }

  .not-found {
    text-align: center;
    padding: 2rem 0;
  }

  .single-page-layout {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  main {
    min-height: 50vh;
  }

  footer {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
    text-align: center;
    font-size: 0.875rem;
    opacity: 0.8;
  }

  a {
    color: var(--primary-color);
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }
</style>
