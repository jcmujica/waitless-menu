---
import "../styles/global.css";
import "../styles/theme.css";
import { generateThemeVariables } from "@/utils/themeUtils";
import { ClientRouter } from "astro:transitions";
import type { IMenu } from "@/types/menu";

interface Props {
  menu?: IMenu;
}

const { menu } = Astro.props;

const theme = (menu?.appearance?.theme || "light") as "light" | "dark";
const styles = menu?.appearance?.style ? JSON.parse(menu.appearance.style) : {};

// Get background style and ensure it doesn't repeat
let backgroundStyle = styles?.background?.style || {};
const primaryColor = styles?.colors?.primary?.id?.split("-")[0] || "slate";
// Generate theme variables based on the selected primary color
const themeVariables = generateThemeVariables(primaryColor);

// Create a style string for the primary color variables
const primaryColorStyles = Object.entries(themeVariables)
  .map(([key, value]) => `${key}: ${value};`)
  .join("\n        ");
---

<html lang="es" class={theme === "dark" ? "bg-black" : "bg-white"}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content={theme} />
    <ClientRouter />
    <title>{menu?.name || "Menu"}</title>

    <!-- Inject primary color variables -->
    <style
      set:html={`
      :root {
        ${primaryColorStyles}
      }
    `}
    ></style>

    <!-- Force the theme mode regardless of user preferences -->
    <script define:vars={{ theme }} is:inline>
      // Force the theme mode and prevent system preferences from overriding it
      document.documentElement.classList.toggle("dark", theme === "dark");
    </script>

    <slot name="head" />
  </head>
  <body class="min-h-screen w-full bg-white relative" id="root">
    <main
      class={`${theme} h-screen flex flex-col overflow-scroll absolute  inset-0 z-0`}
      style={{
        ...backgroundStyle,
      }}
    >
      <slot />
    </main>
  </body>
</html>
