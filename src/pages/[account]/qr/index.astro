---
import { fetchMenu, type Menu } from '../../../services/menus/fetch-menu';
import { TAILWIND_COLORS } from '../../../constants/colors';

const { account } = Astro.params;
const { data, error } = await fetchMenu(account as string);
const menu = data as Menu;

// Parse custom style if available
let customBackground = '';
let backgroundImage = '';
let backgroundSize = '';
let backgroundPosition = '';
let backgroundRepeat = '';
let textColor = '';
let secondaryColor = '';
let accentColor = '';
let primaryColor = '';

if (menu?.appearance?.customStyle) {
  try {
    const parsedStyle = JSON.parse(menu.appearance.customStyle);
    
    // Get background appearance if available
    if (parsedStyle.backgroundAppearance) {
      // Extract all background properties
      if (parsedStyle.backgroundAppearance.background) {
        customBackground = parsedStyle.backgroundAppearance.background;
      }
      if (parsedStyle.backgroundAppearance.backgroundImage) {
        backgroundImage = parsedStyle.backgroundAppearance.backgroundImage;
      }
      if (parsedStyle.backgroundAppearance.backgroundSize) {
        backgroundSize = parsedStyle.backgroundAppearance.backgroundSize;
      }
      if (parsedStyle.backgroundAppearance.backgroundPosition) {
        backgroundPosition = parsedStyle.backgroundAppearance.backgroundPosition;
      }
      if (parsedStyle.backgroundAppearance.backgroundRepeat) {
        backgroundRepeat = parsedStyle.backgroundAppearance.backgroundRepeat;
      }
    } else if (parsedStyle.background) {
      // Fallback for old format
      // Check if the background contains multiple properties
      if (typeof parsedStyle.background === 'string' && parsedStyle.background.includes(';')) {
        // Split the combined background properties
        const bgProps = parsedStyle.background.split(';');
        
        bgProps.forEach((prop: string) => {
          const trimmedProp = prop.trim();
          if (trimmedProp.startsWith('background-image:')) {
            backgroundImage = trimmedProp.replace('background-image:', '').trim();
          } else if (trimmedProp.startsWith('background-size:')) {
            backgroundSize = trimmedProp.replace('background-size:', '').trim();
          } else if (trimmedProp.startsWith('background-position:')) {
            backgroundPosition = trimmedProp.replace('background-position:', '').trim();
          } else if (trimmedProp.startsWith('background-repeat:')) {
            backgroundRepeat = trimmedProp.replace('background-repeat:', '').trim();
          }
        });
      } else {
        // Simple background
        customBackground = parsedStyle.background;
      }
    }
    
    // Get colors if available
    if (parsedStyle.colors) {
      if (parsedStyle.colors.primary) {
        // Check if the primary color is a Tailwind color name (e.g., 'blue-500')
        if (typeof parsedStyle.colors.primary === 'string' && parsedStyle.colors.primary.includes('-')) {
          // Map the Tailwind color name to its hex value
          const colorKey = parsedStyle.colors.primary as keyof typeof TAILWIND_COLORS;
          primaryColor = TAILWIND_COLORS[colorKey] || parsedStyle.colors.primary;
        } else {
          // Use the color value directly if it's not a Tailwind color name
          primaryColor = parsedStyle.colors.primary;
        }
      }
      if (parsedStyle.colors.text) {
        // Check if the text color is a Tailwind color name
        if (typeof parsedStyle.colors.text === 'string' && parsedStyle.colors.text.includes('-')) {
          const colorKey = parsedStyle.colors.text as keyof typeof TAILWIND_COLORS;
          textColor = TAILWIND_COLORS[colorKey] || parsedStyle.colors.text;
        } else {
          textColor = parsedStyle.colors.text;
        }
      }
      if (parsedStyle.colors.secondary) {
        // Check if the secondary color is a Tailwind color name
        if (typeof parsedStyle.colors.secondary === 'string' && parsedStyle.colors.secondary.includes('-')) {
          const colorKey = parsedStyle.colors.secondary as keyof typeof TAILWIND_COLORS;
          secondaryColor = TAILWIND_COLORS[colorKey] || parsedStyle.colors.secondary;
        } else {
          secondaryColor = parsedStyle.colors.secondary;
        }
      }
      if (parsedStyle.colors.accent) {
        // Check if the accent color is a Tailwind color name
        if (typeof parsedStyle.colors.accent === 'string' && parsedStyle.colors.accent.includes('-')) {
          const colorKey = parsedStyle.colors.accent as keyof typeof TAILWIND_COLORS;
          accentColor = TAILWIND_COLORS[colorKey] || parsedStyle.colors.accent;
        } else {
          accentColor = parsedStyle.colors.accent;
        }
      }
    }
  } catch (e) {
    console.error('Error parsing custom style:', e);
  }
}
---

<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{menu?.name || 'Menu'}</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <!-- Apply custom styles directly -->
  <style is:inline set:html={`
    :root {
      ${primaryColor ? `--primary-color: ${primaryColor} !important;` : ''}
      ${secondaryColor ? `--secondary-color: ${secondaryColor} !important;` : ''}
      ${textColor ? `--text-color: ${textColor} !important;` : ''}
      ${accentColor ? `--accent-color: ${accentColor} !important;` : ''}
    }
    body {
      ${customBackground ? `background: ${customBackground} !important;` : ''}
      ${backgroundImage ? `background-image: ${backgroundImage} !important;` : ''}
      ${backgroundSize ? `background-size: ${backgroundSize} !important;` : ''}
      ${backgroundPosition ? `background-position: ${backgroundPosition} !important;` : ''}
      ${backgroundRepeat ? `background-repeat: ${backgroundRepeat} !important;` : ''}
    }
  `}>
  </style>
</head>

<body class={menu?.appearance?.theme || 'light'} data-layout={menu?.appearance?.layout || 'grid'}>
  {error && (
    <div class="error-container">
      <h1>Error</h1>
      <p>Sorry, we couldn't load the menu. Please try again later.</p>
      <p class="error-details">{error.message}</p>
    </div>
  )}

  {menu && (
    <div class="menu-container">
      <header>
        <h1>{menu.name}</h1>
      </header>

      {menu.pages && menu.pages.length > 1 && (
        <nav class="page-navigation">
          {menu.pages.map((page: any, index: number) => (
            <button 
              class={`page-button ${index === 0 ? 'active' : ''}`} 
              data-page-id={page.id}
            >
              {page.name}
            </button>
          ))}
        </nav>
      )}

      <div class="pages-container">
        {menu.pages && menu.pages.map((page: any, pageIndex: number) => (
          <div class="menu-page" id={`page-${page.id}`} style={`display: ${pageIndex === 0 ? 'block' : 'none'};`}>
            {menu.pages.length > 1 && <h2>{page.name}</h2>}
            
            <div class="items-container">
              {page.items && page.items.map((item: any) => (
                <div class="menu-item" data-available={item.is_available.toString()}>
                  {menu.settings?.showImages && item.image_url && (
                    <div class="item-image">
                      <img src={item.image_url} alt={item.name} loading="lazy" />
                    </div>
                  )}
                  <div class="item-content">
                    <h3>{item.name}</h3>
                    {menu.settings?.showPrices && item.price !== null && (
                      <div class="item-price">
                        {new Intl.NumberFormat('es-CL', { 
                          style: 'currency', 
                          currency: 'CLP',
                          maximumFractionDigits: 0
                        }).format(item.price)}
                      </div>
                    )}
                    {!item.is_available && <div class="item-unavailable">Not Available</div>}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  )}

  <footer>
    <p>Powered by Waitless</p>
  </footer>
</body>

<style>
  :root {
    /* Light theme (default) */
    --primary-color: #3b82f6; /* Default blue, can be overridden */
    --secondary-color: #ff006e;
    --text-color: #333;
    --background-color: #f9f9f9;
    --card-background: #fff;
    --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --error-color: #e63946;
    --custom-background: transparent;
    --unavailable-bg: rgba(230, 57, 70, 0.1);
    --unavailable-color: #e63946;
    --footer-bg: rgba(0, 0, 0, 0.05);
    --footer-color: #666;
  }

  body {
    background-color: var(--background-color);
  }

  /* Dark theme */
  body.dark {
    --text-color: #f1f1f1;
    --background-color: #121212;
    --card-background: #1e1e1e;
    --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    --primary-color: #90e0ef;
    --footer-bg: rgba(255, 255, 255, 0.05);
    --footer-color: #aaa;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: 'Poppins', system-ui, -apple-system, sans-serif;
    color: var(--text-color);
    line-height: 1.6;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .menu-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1.5rem;
    flex: 1;
  }

  header {
    text-align: center;
    margin-bottom: 2rem;
    padding: 1rem;
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--primary-color);
    margin: 0;
    line-height: 1.2;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  h2 {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
    color: var(--primary-color);
    text-align: center;
  }

  .page-navigation {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    padding: 0 1rem;
  }

  .page-button {
    background-color: var(--card-background);
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: inherit;
    font-weight: 500;
  }

  .page-button:hover,
  .page-button.active {
    background-color: var(--primary-color);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .menu-page {
    margin-bottom: 2rem;
  }

  .items-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  /* List layout */
  body[data-layout="list"] .items-container {
    grid-template-columns: 1fr;
  }

  .menu-item {
    background-color: var(--card-background);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
  }

  .menu-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
  }

  .menu-item[data-available="false"] {
    opacity: 0.8;
  }

  .item-image {
    height: 200px;
    overflow: hidden;
  }

  .item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .menu-item:hover .item-image img {
    transform: scale(1.05);
  }

  .item-content {
    padding: 1.25rem;
    position: relative;
  }

  .item-content h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .item-price {
    font-weight: 700;
    color: var(--secondary-color);
    font-size: 1.1rem;
    margin-top: 0.5rem;
  }

  .item-unavailable {
    display: inline-block;
    background-color: var(--unavailable-bg);
    color: var(--unavailable-color);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 500;
    margin-top: 0.5rem;
  }

  .error-container {
    max-width: 600px;
    margin: 4rem auto;
    text-align: center;
    padding: 2rem;
    background-color: var(--card-background);
    border-radius: 12px;
    box-shadow: var(--card-shadow);
  }

  .error-details {
    color: var(--error-color);
    font-family: monospace;
    margin-top: 1rem;
    padding: 0.75rem;
    background-color: var(--unavailable-bg);
    border-radius: 6px;
    font-size: 0.9rem;
    word-break: break-word;
  }

  footer {
    text-align: center;
    padding: 1.5rem;
    margin-top: 2rem;
    background-color: var(--footer-bg);
    color: var(--footer-color);
    font-size: 0.9rem;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .menu-container {
      padding: 1rem;
    }

    h1 {
      font-size: 2rem;
    }

    h2 {
      font-size: 1.5rem;
    }

    .items-container {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .item-image {
      height: 180px;
    }
  }

  /* Small screens */
  @media (max-width: 480px) {
    header {
      margin-bottom: 1.5rem;
      padding: 0.75rem;
    }

    h1 {
      font-size: 1.8rem;
    }

    .page-navigation {
      margin-bottom: 1.5rem;
    }

    .page-button {
      padding: 0.4rem 0.8rem;
      font-size: 0.9rem;
    }

    .item-content {
      padding: 1rem;
    }

    .item-content h3 {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  // Client-side JavaScript to handle page navigation
  document.addEventListener('DOMContentLoaded', () => {
    const pageButtons = document.querySelectorAll('.page-button');
    const menuPages = document.querySelectorAll('.menu-page');
    
    // Add click handlers to page buttons
    pageButtons.forEach((button: Element) => {
      button.addEventListener('click', () => {
        const pageId = button.getAttribute('data-page-id');
        
        // Update active button
        pageButtons.forEach((btn: Element) => btn.classList.remove('active'));
        button.classList.add('active');
        
        // Show selected page, hide others
        menuPages.forEach((page: Element) => {
          if (page.id === `page-${pageId}`) {
            (page as HTMLElement).style.display = 'block';
          } else {
            (page as HTMLElement).style.display = 'none';
          }
        });
      });
    });
  });
</script>
</html>
